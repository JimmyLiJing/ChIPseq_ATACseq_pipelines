import os

#Note: ALIGN_DIR variable must be set in parent snakefile


# Rules

rule bwa_aln:
	input:
		lambda wildcards: config['lib_paths'][wildcards.library][wildcards.lane][wildcards.read]
	output:
		temp(os.path.join(ALIGN_DIR, "{library}_L{lane}_R{read}.sai"))
	params:
		index = lambda wildcards: config['bwa_index'][config['lib_genome'][wildcards.library]] #nested config call identical functionality to config['bwa_index'][get_genome(wildcards.library)]
	threads: 8
	shell:
		"bwa aln -t {threads} {params.index} {input} > {output}"

rule bwa_sampe:
	input:
		fq_left = lambda wildcards: config['lib_paths'][wildcards.library][wildcards.lane]['1'],
		fq_right = lambda wildcards: config['lib_paths'][wildcards.library][wildcards.lane]['2'],
		sai_left = os.path.join(ALIGN_DIR, "{library}_L{lane}_R1.sai"),
		sai_right = os.path.join(ALIGN_DIR, "{library}_L{lane}_R2.sai")
	output:
		temp(os.path.join(ALIGN_DIR, "{library}_L{lane}.aligned.sam"))
	params:
		index = lambda wildcards: config['bwa_index'][config['lib_genome'][wildcards.library]],
		rg = lambda wildcards: expand('\\t'.join(["@RG", "ID:{library}_L{lane}", "SM:{samplename}", "LB:{library}"]), library=wildcards.library, lane=wildcards.lane, samplename=config['lib_samplename'][wildcards.library] )
	shell:
		"bwa sampe -r \'{params.rg}\' {params.index} {input.sai_left} {input.sai_right} {input.fq_left} {input.fq_right} > {output}"

rule picard_sort:
	input:
		os.path.join(ALIGN_DIR, "{library}_L{lane}.aligned.sam")
	output:
		temp(os.path.join(ALIGN_DIR, "{library}_L{lane}.sorted.sam"))
	shell:
		"picard-tools SortSam I={input} O={output} SO=coordinate VALIDATION_STRINGENCY=LENIENT"

rule merge_library: 
	input:
		lambda wildcards: expand(os.path.join(ALIGN_DIR, "{library}_L{lane}.sorted.sam"), library=wildcards.library, lane=config['lib_paths'][wildcards.library].keys())
	output:
		os.path.join(ALIGN_DIR, "{library}.merged.bam")
	shell:
		"samtools merge {output} {input}"
